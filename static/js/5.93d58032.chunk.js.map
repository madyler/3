{"version":3,"sources":["components/Dialogs/Message/Message.jsx","components/Dialogs/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","hoc/AuthRedirect.jsx"],"names":["Message","props","className","s","message","composeValidators","validators","value","reduce","error","validator","undefined","AddMessageForm","onSubmit","console","log","addMessage","addNewMessage","handleSubmit","component","Textarea","name","validate","required","maxLengthCreator","placeholder","Dialogs","dialogsElements","dialogsPage","dialogs","map","d","DialogItem","ava","id","messagesElements","messages","m","dialogsItem","compose","connect","state","dispatch","addMessageActionCreator","withAuthRedirect","mapStateToPropsForRedirect","isAuth","auth","Component","RedirectComponent","this","to","React"],"mappings":"wIAoBeA,EAhBC,SAACC,GAMb,OAEI,qBAAKC,UAAWC,IAAEC,QAAlB,SACKH,EAAMG,W,wBCRbC,EAAoB,sCAAIC,EAAJ,yBAAIA,EAAJ,uBAAmB,SAAAC,GAAK,OAC9CD,EAAWE,QAAO,SAACC,EAAOC,GAAR,OAAsBD,GAASC,EAAUH,UAAQI,KAwBxDC,EAtBQ,SAAAX,GACnB,OACI,cAAC,IAAD,CAAMY,SAAU,SAACN,GACbO,QAAQC,IAAIR,GACZN,EAAMe,WAAWT,EAAMU,gBAF3B,SAIK,gBAAEC,EAAF,EAAEA,aAAF,OACG,uBAAML,SAAUK,EAAhB,UACI,8BACI,cAAC,IAAD,CAAOC,UAAWC,IAAUC,KAAK,gBAC1BC,SAAUjB,EAAkBkB,IAAUC,YAAiB,KACvDC,YAAY,wBAEvB,8BACI,0DCOTC,EArBC,SAACzB,GACb,IAAI0B,EAAkB1B,EAAM2B,YAAYC,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAACC,EAAA,EAAD,CAAYC,IAAKF,EAAEE,IAAKZ,KAAMU,EAAEV,KACpBa,GAAIH,EAAEG,IADyBH,EAAEG,OAElGC,EAAmBlC,EAAM2B,YAAYQ,SAASN,KAAI,SAAAO,GAAC,OAAI,cAAC,EAAD,CAASjC,QAASiC,EAAEjC,QAAoB8B,GAAIG,EAAEH,IAAZG,EAAEH,OAE/F,OACI,sBAAKhC,UAAWC,IAAE0B,QAAlB,UACI,qBAAK3B,UAAWC,IAAEmC,YAAlB,SACKX,IAEL,gCACI,qBAAKzB,UAAWC,IAAEiC,SAAlB,SACKD,IAEL,cAAC,EAAD,CAAgBnB,WAAYf,EAAMe,oB,gCCAnCuB,4BACXC,aAdkB,SAACC,GACnB,MAAO,CACHb,YAAaa,EAAMb,gBAGF,SAACc,GACtB,MAAO,CACH1B,WAAY,SAACT,GACTmC,EAASC,YAAwBpC,SAOzCqC,IAFWL,CAGbb,I,mJCrBEmB,EAA6B,SAACJ,GAAD,MAAY,CACzCK,OAAQL,EAAMM,KAAKD,SAGVF,EAAmB,SAACI,GAAc,IACrCC,EADoC,4JAEtC,WACQ,OAAKC,KAAKjD,MAAM6C,OACT,cAACE,EAAD,eAAeE,KAAKjD,QADI,cAAC,IAAD,CAAWkD,GAAI,eAHhB,GACVC,IAAMJ,WAMtC,OAAOR,YAAQK,EAARL,CAAoCS","file":"static/js/5.93d58032.chunk.js","sourcesContent":["import React from 'react';\nimport s from './../Dialogs.module.css';\n\n\nconst Message = (props) => {\n    // let i = props.id;\n    // let n = i % 2;\n    //     n = 0 ? s.message.marginLeft = 100 + 'px' :\n  //  let mrg = () => {s.message.marginLeft = 200+px;}\n  // mrg()\n    return (\n\n        <div className={s.message}>\n            {props.message}\n        </div>\n\n    )\n}\n\n\nexport default Message;\n","import React from \"react\";\nimport {Field, Form} from \"react-final-form\";\nimport {Textarea} from \"../commons/FormsControls/FormsControls\";\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\n\nconst composeValidators = (...validators) => value =>\n    validators.reduce((error, validator) => error || validator(value), undefined)\n\nconst AddMessageForm = props => {\n    return (\n        <Form onSubmit={(value) => {\n            console.log(value);\n            props.addMessage(value.addNewMessage)\n        }}>\n            {({handleSubmit}) => (\n                <form onSubmit={handleSubmit}>\n                    <div>\n                        <Field component={Textarea} name=\"addNewMessage\"\n                               validate={composeValidators(required, maxLengthCreator(50))}\n                               placeholder=\"Enter new message\"/>\n                    </div>\n                    <div>\n                        <button>Add message</button>\n                    </div>\n                </form>\n            )}\n        </Form>\n    )\n}\n\nexport default AddMessageForm;","import React from 'react';\nimport s from './Dialogs.module.css';\nimport DialogItem from './DialogItem/DialogItem';\nimport Message from './Message/Message';\nimport AddMessageForm from \"./AddMessageForm\";\n\n\n\nconst Dialogs = (props) => {\n    let dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem ava={d.ava} name={d.name} key={d.id}\n                                                                         id={d.id}/>);\n    let messagesElements = props.dialogsPage.messages.map(m => <Message message={m.message} key={m.id} id={m.id}/>);\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItem}>\n                {dialogsElements}\n            </div>\n            <div>\n                <div className={s.messages}>\n                    {messagesElements}\n                </div>\n                <AddMessageForm addMessage={props.addMessage}/>\n            </div>\n        </div>\n    )\n}\n\n\nexport default Dialogs;\n","import React from 'react';\nimport s from './Dialogs.module.css';\nimport Dialogs from \"./Dialogs\";\nimport {addMessageActionCreator} from \"../redux/dialogs-reducer\";\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from \"../../hoc/AuthRedirect\";\nimport {compose} from \"redux\";\n\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogsPage: state.dialogsPage\n    }\n}\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        addMessage: (value) => {\n            dispatch(addMessageActionCreator(value))\n        }\n    }\n}\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs);\n","import {Redirect} from \"react-router-dom\";\nimport React from \"react\";\nimport {connect} from \"react-redux\";\n\nlet mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth\n})\n\nexport const withAuthRedirect = (Component) =>{\n    class RedirectComponent extends React.Component {\n        render(){\n                if (!this.props.isAuth) return <Redirect  to={'/login'}/>\n                return <Component {...this.props}/>\n        }\n    }\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\n\n}\n"],"sourceRoot":""}